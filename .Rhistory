library(tidyverse)
library(tidygeocoder)
df <- read_csv("funda_buy_17-03-2023.csv")
df <- read_csv("data/funda_buy_17-03-2023.csv")
model <- lm(data = df, price~room +living_area + house_age + house_type)
summary(model)
df <- read_csv("data/funda_buy_21-03-2023(sample100p).csv")
model <- lm(data = df, price~room +living_area + house_age + house_type)
model <- lm(data = df, price~room +living_area + house_age + house_type)
View(df)
cols(df)
columns(df)
cols(df)
View(df)
sapply(df, class)
df <- read_csv("data/funda_buy_21-03-2023(sample100p).csv") %>%
mutate(house_type = factor(house_type))
df <- read_csv("data/funda_buy_21-03-2023(sample100p).csv") %>%
mutate(house_type = factor(house_type))
sapply(df, class)
df <- read_csv("data/funda_buy_21-03-2023(sample100p).csv") %>%
mutate(house_type = factor(house_type),
building_type = factor(building_type))
sapply(df, class)
df <- read_csv("data/funda_buy_21-03-2023(sample100p).csv") %>%
mutate(house_type = factor(house_type),
building_type = factor(building_type),
energy_label = factor(energy_label))
sapply(df, class)
df <- read_csv("data/funda_buy_21-03-2023(sample100p).csv") %>%
mutate(house_type = factor(house_type),
building_type = factor(building_type),
energy_label = factor(energy_label),
has_balcony = factor(has_balcony),
has_garden = factor(has_garden))
sapply(df, class)
model <- lm(data = df, price~room +living_area + house_age + house_type)
model <- lm(data = df, price~room +living_area + house_age )
summary(model)
model <- lm(data = df, price~room +living_area + house_age + house_type )
df <- read_csv("data/funda_buy_21-03-2023(sample100p).csv")
str(df)
df <-  df %>%
mutate(house_type = factor(house_type),
building_type = factor(building_type),
energy_label = factor(energy_label),
has_balcony = factor(has_balcony),
has_garden = factor(has_garden))
str(df)
model <- lm(data = df, price~room +living_area + house_age)
summary(model)
df_new <- df %>%
top_n(10) %>%
mutate(adddreszip = paste0(address, ", Noord-Holland")) %>%
geocode(adddreszip, method = 'osm', lat = latitude , long = longitude)
df_new <- df %>%
mutate(adddreszip = paste0(address, ", Noord-Holland")) %>%
geocode(adddreszip, method = 'osm', lat = latitude , long = longitude)
df_new <- df %>%
separate(addressline, c("zip", "letters", "city", "."), " ")) %>%
df_new <- df %>%
separate(addressline, c("zip", "letters", "city", "."), " ") %>%
geocode(adddreszip, method = 'osm', lat = latitude , long = longitude)
df_new <- df %>%
separate(address_line, c("zip", "letters", "city", "."), " ") %>%
geocode(adddreszip, method = 'osm', lat = latitude , long = longitude)
df_new <- df %>%
separate(address_line, c("zip", "letters", "city", "."), " ")
View(df_new)
df_new <- df %>%
separate(address_line, c("zip", "letters", "city", "optional1","optional2", "optional3"), " ") %>%
geocode(adddreszip, method = 'osm', lat = latitude , long = longitude)
df_new <- df %>%
separate(address_line, c("zip", "letters", "city", "optional1","optional2", "optional3"), " ")
df_new <- df %>%
separate(address_line, c("zip", "letters", "city", "optional1","optional2", "optional3", "optional4", "optional5"), " ")
df_new <- df %>%
separate(address_line, c("zip", "letters", "city", "optional1","optional2", "optional3", "optional4", "optional5"), " ") %>%
mutate(addressline_city = paste(city, optional1, optional2, optional3, optional4, optional5),
addressline_zip = paste(zip, letters),
addresszip = paste0(address, ", ",addressline_zip, ", ", city)) %>%
select(-optional1, -optional2, -optional3, -optional4, -optional5)
df_new <- df %>%
separate(address_line, c("zip", "letters", "city", "optional1","optional2", "optional3", "optional4"), " ") %>%
mutate(addressline_city = paste(city, optional1, optional2, optional3, optional4),
addressline_zip = paste(zip, letters),
addresszip = paste0(address, ", ",addressline_zip, ", ", city)) %>%
select(-optional1, -optional2, -optional3, -optional4, -optional5)
df_new <- df %>%
separate(address_line, c("zip", "letters", "city", "optional1","optional2", "optional3", "optional4"), " ") %>%
mutate(addressline_city = paste(city, optional1, optional2, optional3, optional4),
addressline_zip = paste(zip, letters),
addresszip = paste0(address, ", ",addressline_zip, ", ", city)) %>%
select(-optional1, -optional2, -optional3, -optional4)
df_new <- df %>%
top_n(10) %>%
separate(address_line, c("zip", "letters", "city", "optional1","optional2", "optional3", "optional4"), " ") %>%
mutate(addressline_city = paste(city, optional1, optional2, optional3, optional4),
addressline_zip = paste(zip, letters),
addresszip = paste0(address, ", ",addressline_zip, ", ", city)) %>%
select(-optional1, -optional2, -optional3, -optional4) %>%
geocode(adddreszip, method = 'osm', lat = latitude , long = longitude)
df_new <- df %>%
top_n(10) %>%
separate(address_line, c("zip", "letters", "city", "optional1","optional2", "optional3", "optional4"), " ") %>%
mutate(addressline_city = paste(city, optional1, optional2, optional3, optional4),
addressline_zip = paste(zip, letters),
addresszip = paste0(address, ", ",addressline_zip, ", ", city)) %>%
select(-optional1, -optional2, -optional3, -optional4) %>%
geocode(addresszip, method = 'osm', lat = latitude , long = longitude)
library(leaflet)
leaflet(df_new) %>% addTiles() %>%
addCircleMarkers(lng = ~longitude, lat = ~latitude,
popup = ~address)
df_new <- df %>%
separate(address_line, c("zip", "letters", "city", "optional1","optional2", "optional3", "optional4"), " ") %>%
mutate(addressline_city = paste(city, optional1, optional2, optional3, optional4),
addressline_zip = paste(zip, letters),
addresszip = paste0(address, ", ",addressline_zip, ", ", city)) %>%
select(-optional1, -optional2, -optional3, -optional4) %>%
geocode(addresszip, method = 'osm', lat = latitude , long = longitude)
leaflet(df_new) %>% addTiles() %>%
addCircleMarkers(lng = ~longitude, lat = ~latitude,
popup = ~address)
df_sp <- df_new %>% drop_na()
x = st_as_sf(df_sp, coords = c( "longitude", "latitude"), crs = 4326)
library(tidyverse)
library(tidygeocoder)
library(leaflet)
library(sf)
df_sp <- df_new %>% drop_na()
x = st_as_sf(df_sp, coords = c( "longitude", "latitude"), crs = 4326)
x <- st_transform(x, crs = 28992)
st_write(x, "data/test_sample(100p).gpkg")
x <- st_read("data/test_sample(100p).gpkg")
qtm(x)
library(tidyverse)
library(tidygeocoder)
library(leaflet)
library(sf)
library(tmap)
df_sp <- df_new %>% drop_na()
x = st_as_sf(df_sp, coords = c( "longitude", "latitude"), crs = 4326)
x <- st_transform(x, crs = 28992)
st_write(x, "data/test_sample(100p).gpkg")
qtm(x)
greendata_sp <- as_Spatial(x)
#fit the adaptive kernel
#find adaptive kernel using gaussian function
abw <- bw.gwr(price~room +living_area + house_age,
approach = "AIC", #specified by CV for cross-validation approach or by AIC corrected (AICc), we used AIC
adaptive = TRUE,
kernel="gaussian", #this can be different function e.g., bisquare,exponential, depend on the prior understanding or choice of the modeler
data=greendata_sp) #give the sp data created earlier
df_test <- df %>%
top_n(10) %>%
separate(address_line, c("zip", "letters", "city", "optional1","optional2", "optional3", "optional4"), " ") %>%
mutate(addressline_city = paste(city, optional1, optional2, optional3, optional4),
addressline_zip = paste(zip, letters),
addresszip = paste0(address, ", ",addressline_zip, ", ", city, ", Nederland")) %>%
select(-optional1, -optional2, -optional3, -optional4) %>%
geocode(addresszip, method = 'osm', lat = latitude , long = longitude)
View(df_test)
greendata_sp <- as_Spatial(x)
#fit the adaptive kernel
#find adaptive kernel using gaussian function
abw <- bw.gwr(price~room +living_area + house_age,
approach = "AIC", #specified by CV for cross-validation approach or by AIC corrected (AICc), we used AIC
adaptive = TRUE,
kernel="gaussian", #this can be different function e.g., bisquare,exponential, depend on the prior understanding or choice of the modeler
data=greendata_sp) #give the sp data created earlier
library(tidyverse)
library(tidygeocoder)
library(leaflet)
library(sf)
library(tmap)
library(spatialreg)
library(GWmodel)
greendata_sp <- as_Spatial(x)
#fit the adaptive kernel
#find adaptive kernel using gaussian function
abw <- bw.gwr(price~room +living_area + house_age,
approach = "AIC", #specified by CV for cross-validation approach or by AIC corrected (AICc), we used AIC
adaptive = TRUE,
kernel="gaussian", #this can be different function e.g., bisquare,exponential, depend on the prior understanding or choice of the modeler
data=greendata_sp) #give the sp data created earlier
#fitting the model with gwr.basic function
a.gwr <- gwr.basic(price~room +living_area + house_age, #the equation
adaptive = TRUE,
kernel="gaussian", #indicate the Kernel again
bw = 19, #give the optimal bandwidth we found in the last stage
data=greendata_sp)
#print the model result
a.gwr
multiGWR <- gwr.multiscale(price~room +living_area + house_age,
data = greendata_sp,
adaptive = T,
max.iterations = 10, #usually large number to make sure each variable converage to best bandwidth
criterion="CVR", #criterion for determining the convergence of the back-fitting procedure
kernel = "bisquare", #kernel can also be gaussian, exponential
bws0=c(10,10,10), #starting number of neighbors
verbose = F, predictor.centered=rep(T, 6))
multiGWR <- gwr.multiscale(price~room +living_area + house_age,
data = greendata_sp %>% top_n(100),
adaptive = T,
max.iterations = 10, #usually large number to make sure each variable converage to best bandwidth
criterion="CVR", #criterion for determining the convergence of the back-fitting procedure
kernel = "bisquare", #kernel can also be gaussian, exponential
bws0=c(10,10,10), #starting number of neighbors
verbose = F, predictor.centered=rep(T, 6))
multiGWR <- gwr.multiscale(price~room +living_area + house_age,
data = greendata_sp[:10]),
multiGWR <- gwr.multiscale(price~room +living_area + house_age,
data = greendata_sp),
multiGWR <- gwr.multiscale(price~room +living_area + house_age,
data = greendata_sp,
adaptive = T,
max.iterations = 10, #usually large number to make sure each variable converage to best bandwidth
criterion="CVR", #criterion for determining the convergence of the back-fitting procedure
kernel = "gaussian", #kernel can also be gaussian, exponential
bws0=c(10,10,10), #starting number of neighbors
verbose = F, predictor.centered=rep(T, 6))
multiGWR <- gwr.multiscale(price~room +living_area + house_age,
data = greendata_sp,
adaptive = T,
max.iterations = 10, #usually large number to make sure each variable converage to best bandwidth
criterion="CVR", #criterion for determining the convergence of the back-fitting procedure
kernel = "gaussian", #kernel can also be gaussian, exponential
bws0=c(10,10,10), #starting number of neighbors
verbose = F, predictor.centered=rep(T, 6))
multiGWR <- gwr.multiscale(price~room +living_area + house_age,
data = greendata_sp,
adaptive = T,
max.iterations = 10, #usually large number to make sure each variable converage to best bandwidth
criterion="CVR", #criterion for determining the convergence of the back-fitting procedure
kernel = "gaussian", #kernel can also be gaussian, exponential
bws0=c(10,10,10), #starting number of neighbors
verbose = F, predictor.centered=rep(T, 6),
n.cores =2)
multiGWR <- gwr.multiscale(price~room +living_area + house_age,
data = greendata_sp,
adaptive = T,
max.iterations = 10, #usually large number to make sure each variable converage to best bandwidth
criterion="CVR", #criterion for determining the convergence of the back-fitting procedure
kernel = "gaussian", #kernel can also be gaussian, exponential
bws0=c(10,10,10), #starting number of neighbors
verbose = F, predictor.centered=rep(T, 6),
parallel.method = "omp")
multiGWR
mgwr_sf = st_as_sf(multiGWR$SDF)
mgwrM1 <- mapview::mapview(mgwr_sf, zcol = "room", col.regions= brewer.pal(11, "PuOr"), map.type = "CartoDB.Positron")
library(tidyverse)
library(tidygeocoder)
library(leaflet)
library(sf)
library(tmap)
library(spatialreg)
library(GWmodel)
library(RColorBrewer)
library(mapview)
mgwrM1 <- mapview::mapview(mgwr_sf, zcol = "room", col.regions= brewer.pal(11, "PuOr"), map.type = "CartoDB.Positron")
mgwrM1 <- mapview::mapview(mgwr_sf, zcol = "room", col.regions= brewer.pal(11, "PuOr"), map.type = "CartoDB.Positron")
mgwrM2 <- mapview::mapview(mgwr_sf, zcol = "living_area", col.regions= brewer.pal(11, "PuOr"), map.type = "CartoDB.Positron")
mgwrM3 <- mapview::mapview(mgwr_sf, zcol = "house_age", col.regions= brewer.pal(11, "PuOr"), map.type = "CartoDB.Positron")
sync(mgwrM1, mgwrM2, mgwrM3)
library(tidyverse)
library(tidygeocoder)
library(leaflet)
library(sf)
library(tmap)
library(spatialreg)
library(GWmodel)
library(RColorBrewer)
library(mapview)
library(leafsync)
sync(mgwrM1, mgwrM2, mgwrM3)
sync(mgwrM1, mgwrM2, mgwrM3)
View(mgwr_sf)
predict(multiGWR, df_new)
View(mgwr_sf)
View(df_new)
mgwr_sf = st_as_sf(multiGWR$SDF)
st_write(mgwr_sf, "data/test/test_sample(100p)_predictions.gpkg")
mgwr_sf = st_as_sf(multiGWR$SDF)
st_write(mgwr_sf, "data/test/test_sample(100p)_predictions.gpkg")
library(tidyverse)
library(tidygeocoder)
library(leaflet)
library(sf)
library(tmap)
library(spatialreg)
library(GWmodel)
library(RColorBrewer)
library(mapview)
library(leafsync)
df <- read_csv("data/test/funda_buy_21-03-2023(sample100p).csv")
View(df)
View(df_new)
leaflet(df_new) %>% addTiles() %>%
addCircleMarkers(lng = ~longitude, lat = ~latitude,
popup = ~address)
